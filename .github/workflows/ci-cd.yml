name: PelotonIQ CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/pelotoniq
  TERRAFORM_VERSION: '1.6.0'
  KUBECTL_VERSION: 'v1.28.0'
  HELM_VERSION: 'v3.13.0'

jobs:
  # Code Quality and Security Analysis
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          data-processor/package-lock.json
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    # Backend Code Analysis
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Maven security check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnAnyVulnerability=false \
          -DsuppressionFile=.github/security/suppressions.xml
    
    - name: Run SpotBugs analysis
      run: ./mvnw spotbugs:check
    
    - name: Run Checkstyle
      run: ./mvnw checkstyle:check
    
    # Frontend Code Analysis
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint -- --format=sarif --output-file=eslint-results.sarif
      continue-on-error: true
    
    - name: Run Audit
      working-directory: ./frontend
      run: npm audit --audit-level=high
    
    # Data Processor Analysis
    - name: Install data processor dependencies
      working-directory: ./data-processor
      run: npm ci
    
    - name: Run data processor ESLint
      working-directory: ./data-processor
      run: npm run lint -- --format=sarif --output-file=eslint-results.sarif
      continue-on-error: true
    
    # Python AI Services Analysis
    - name: Install Python dependencies
      working-directory: ./ai-services
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run Python security check
      working-directory: ./ai-services
      run: |
        bandit -r . -f json -o bandit-results.json
        safety check --json --output safety-results.json
      continue-on-error: true
    
    - name: Run Python linting
      working-directory: ./ai-services
      run: |
        flake8 . --format=json --output-file=flake8-results.json
        pylint . --output-format=json > pylint-results.json || true
    
    # Container Security Scanning
    - name: Build Docker images for scanning
      run: |
        docker build -f docker/backend/Dockerfile -t pelotoniq/backend:test .
        docker build -f docker/frontend/Dockerfile -t pelotoniq/frontend:test ./frontend
        docker build -f docker/data-processor/Dockerfile -t pelotoniq/data-processor:test ./data-processor
        docker build -f docker/ai-services/Dockerfile -t pelotoniq/ai-services:test ./ai-services
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pelotoniq/backend:test'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: |
          frontend/eslint-results.sarif
          data-processor/eslint-results.sarif
          trivy-backend-results.sarif
      continue-on-error: true
    
    # SonarCloud Analysis
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=pelotoniq
          -Dsonar.organization=${{ github.repository_owner }}
          -Dsonar.sources=src,frontend/src,data-processor,ai-services
          -Dsonar.exclusions=**/node_modules/**,**/target/**,**/*.test.js,**/*.spec.js
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

  # Unit and Integration Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: pelotoniq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run unit tests
      run: ./mvnw test -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/pelotoniq_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
    
    - name: Run integration tests
      run: ./mvnw verify -Dspring.profiles.active=test,integration
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/pelotoniq_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
    
    - name: Generate test report
      run: ./mvnw jacoco:report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          target/surefire-reports/
          target/failsafe-reports/
          target/site/jacoco/
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Tests
        path: 'target/surefire-reports/*.xml'
        reporter: java-junit

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
      env:
        CI: true
    
    - name: Run E2E tests
      working-directory: ./frontend
      run: |
        npm run build
        npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-report.xml
          frontend/cypress/screenshots/
          frontend/cypress/videos/
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Frontend Tests
        path: 'frontend/test-report.xml'
        reporter: jest-junit

  test-data-processor:
    name: Data Processor Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: pelotoniq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: data-processor/package-lock.json
    
    - name: Install dependencies
      working-directory: ./data-processor
      run: npm ci
    
    - name: Run tests
      working-directory: ./data-processor
      run: npm test -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/pelotoniq_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: data-processor-test-results
        path: data-processor/coverage/

  test-ai-services:
    name: AI Services Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./ai-services
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      working-directory: ./ai-services
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
      env:
        PYTHON_ENV: test
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ai-services-test-results
        path: |
          ai-services/htmlcov/
          ai-services/coverage.xml
          ai-services/test-results.xml

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 60  # Wait for services to start
    
    - name: Run K6 performance tests
      uses: grafana/k6-action@v0.3.1
      with:
        filename: tests/performance/load-test.js
      env:
        K6_PROMETHEUS_RW_SERVER_URL: ${{ secrets.K6_PROMETHEUS_RW_SERVER_URL }}
        K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: true
    
    - name: Run artillery.io tests
      run: |
        npm install -g artillery
        artillery run tests/performance/api-load-test.yml --output performance-results.json
        artillery report performance-results.json --output performance-report.html
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          performance-results.json
          performance-report.html
    
    - name: Stop test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Build and Push Container Images
  build-images:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [code-analysis, test-backend, test-frontend, test-data-processor, test-ai-services]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [backend, frontend, data-processor, ai-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component == 'backend' && '.' || format('./{0}', matrix.component) }}
        file: ${{ format('./docker/{0}/Dockerfile', matrix.component) }}
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}:${{ github.sha }}
      env:
        COSIGN_EXPERIMENTAL: 1

  # Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Get RDS endpoint
      id: rds
      run: |
        RDS_ENDPOINT=$(aws rds describe-db-instances \
          --db-instance-identifier pelotoniq-prod-postgres \
          --query 'DBInstances[0].Endpoint.Address' \
          --output text)
        echo "endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
    
    - name: Run database migration
      run: |
        ./mvnw flyway:migrate \
          -Dflyway.url=jdbc:postgresql://${{ steps.rds.outputs.endpoint }}:5432/pelotoniq \
          -Dflyway.user=${{ secrets.DB_USERNAME }} \
          -Dflyway.password=${{ secrets.DB_PASSWORD }}
    
    - name: Verify migration
      run: |
        ./mvnw flyway:info \
          -Dflyway.url=jdbc:postgresql://${{ steps.rds.outputs.endpoint }}:5432/pelotoniq \
          -Dflyway.user=${{ secrets.DB_USERNAME }} \
          -Dflyway.password=${{ secrets.DB_PASSWORD }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region us-west-2 \
          --name pelotoniq-staging-cluster
    
    - name: Deploy to staging
      run: |
        helm upgrade --install pelotoniq-staging ./helm/pelotoniq \
          --namespace pelotoniq-staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set ingress.host=staging.pelotoniq.com \
          --values helm/pelotoniq/values-staging.yaml \
          --wait --timeout=10m
    
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=pelotoniq-backend -n pelotoniq-staging --timeout=300s
        curl -f https://staging.pelotoniq.com/api/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment completed: https://staging.pelotoniq.com'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, database-migration, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region us-west-2 \
          --name pelotoniq-prod-cluster
    
    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        helm upgrade --install pelotoniq-green ./helm/pelotoniq \
          --namespace pelotoniq-prod \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set deployment.name=green \
          --set ingress.host=pelotoniq.com \
          --values helm/pelotoniq/values-production.yaml \
          --wait --timeout=15m
        
        # Run production smoke tests
        kubectl wait --for=condition=ready pod -l app=pelotoniq-backend,deployment=green -n pelotoniq-prod --timeout=300s
        
        # Switch traffic to green deployment
        kubectl patch service pelotoniq-backend-service -n pelotoniq-prod \
          -p '{"spec":{"selector":{"deployment":"green"}}}'
        
        # Verify deployment
        sleep 30
        curl -f https://pelotoniq.com/api/health || exit 1
        
        # Clean up blue deployment
        helm uninstall pelotoniq-blue -n pelotoniq-prod || true
        
        # Rename green to blue for next deployment
        kubectl patch deployment pelotoniq-backend-green -n pelotoniq-prod \
          -p '{"metadata":{"name":"pelotoniq-backend-blue"},"spec":{"selector":{"matchLabels":{"deployment":"blue"}},"template":{"metadata":{"labels":{"deployment":"blue"}}}}}'
    
    - name: Run post-deployment tests
      run: |
        # Health check
        curl -f https://pelotoniq.com/api/health
        
        # API functionality test
        curl -f https://pelotoniq.com/api/teams
        
        # Performance test
        ab -n 100 -c 10 https://pelotoniq.com/api/health
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        text: 'Production deployment completed: https://pelotoniq.com'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
    
    - name: Rollback deployment
      run: |
        NAMESPACE=${{ github.ref == 'refs/heads/main' && 'pelotoniq-prod' || 'pelotoniq-staging' }}
        aws eks update-kubeconfig --region us-west-2 --name pelotoniq-${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}-cluster
        
        helm rollback pelotoniq-${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }} -n $NAMESPACE
        
        kubectl wait --for=condition=ready pod -l app=pelotoniq-backend -n $NAMESPACE --timeout=300s
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        text: 'Rollback completed for ${{ github.ref }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}